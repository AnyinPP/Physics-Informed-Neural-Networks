"""A simple PINN for linear thermal elasticity."""
import tensorflow as tf
import matplotlib.pyplot as plt

print(tf.__version__)

class PINN(tf.keras.Model):
    """PINN for Heat Conductivity.

    A PINN solving a straight line equation for a one-dimensional homogeneous 
    rod with one side fixed and the other side subjected to a uniaxial , 
    thermal heat. The material law is Steady-state heat equation, 
    thus small strain theory applies.
   
    Args:
        Straight line Heat Equation: Straight line Heat Equation for 
        the one dimensional i.e T=t1X + t0
    
    heat: The heat acting on the rod.
    strain: The extension of the cross -sectional length of the rod
    laplacian: Change in temperature
    """

    def __init__(
            self ,
            strain=0.00,
            temperature_0=30,
            temp_change=15.00,
            temperature_1=15
    ):
        super(PINN , self).__init__()
        self.X = strain
        self.Temp = temperature_0
        self.Temp1 = temperature_1
        self.sig = self.Temp1 * self.X + self.Temp
        
        self.build(input_shape=1)

    def build(self , input_shape):
        """Builds the artificial neural network.

        Hard boundary conditions are used to automatically enforce the
        boundary conditions. At the respective boundary , the neural network
        term vanishes and the prescribed boundary condition is automatically
        fullfilled. Here , 'D_' is a distance function to the boundary
        coordinate and 'G_' is the value of the specific boundary condition.
        """
        input_layer = tf.keras.layers.Input(
            shape=input_shape ,
            name="input_layer")
        
        hidden_layer = tf.keras.layers.Dense(
            units=32,
            activation="tanh",
            name="hidden_layer")(input_layer)
              
        output_layer = tf.keras.layers.Dense(
            units=2,
            name="output_layer")(hidden_layer)

        G_u = 0.0
        D_u = -1.0 - input_layer[:, 0]
        u = G_u + D_u * output_layer[:, 1]
        u = tf.reshape(u, (-1, 1))

        G_sig = self.sig
        D_sig = -1.0 - input_layer[:, 0]
        sig = G_sig + D_sig * output_layer[:, 1]
        sig = tf.reshape(sig, (-1, 1))

        self.ann = tf.keras.Model(
            inputs=[input_layer],
            outputs=[u, sig],
            name="ANN",
        )
      
        self.built = True

    def residual(self , inputs):
        """Calculate residual of governing equations.
        
        The following governing equations exist in linear elasticity:

            - Balance law of linear momentum: sig_x = 0
            - Hooke's law: sig - X * eps = 0
            - Kinematic relation: eps = u_x.

        Plugging in the kinematic relation into Hooke's law, one needs to
        consider two residuals , namely the material residual and the balance
        residual:

            - material residual: sig - X * u_x = residual_material
            - balance residual: sig_x = residual_balance.

        Args:

            inputs: Input coordinates.
        """
        with tf.GradientTape(persistent=True) as tape:
            tape.watch(inputs)
            u = self.ann(inputs)[0]
            sig = self.ann(inputs)[1]

        u_x = tape.gradient(u, inputs)
        sig_x = tape.gradient(sig, inputs)

        residual_material = self.X * u_x - sig
        residual_balance = sig_x

        return {
            "residual_material": residual_material ,
            "residual_balance": residual_balance ,
        }

    def call(self , inputs):
        """Forward pass.

        The forward pass of the PINN to calculate the residuals at every
        coordinate point of the rod.

        Args:
              inputs: Input coordinates.
        """
        inputs = tf.reshape(inputs , (-1, 1))
        residual = self.residual(inputs=inputs)
        r_mat = residual["residual_material"]
        r_bal = residual["residual_balance"]
        loss = tf.reduce_mean(tf.square(r_mat) + tf.square(r_bal))
        self.add_loss(loss)
        return loss

    def predict(self , inputs):
        """Prediction of temperature and heat.

        Args:
            inputs: Input coordinates.
        """
        u = self.ann(inputs)[0]
        sig = self.ann(inputs)[1]
        return {"temp": u, "sig": sig}


if __name__ == "__main__":

      pinn = PINN()
      pinn.compile(
          optimizer=tf.keras.optimizers.Adam(),
          run_eagerly=False)
      pinn.summary()
      coords = tf.linspace(0.0, 1.0, 100)
      history = pinn.fit(coords , epochs=500, verbose=2)
      
      plt.figure(0)
      plt.semilogy(history.history["loss"])
      
      prediction = pinn.predict(coords)
      temperature = prediction["temp"]
      stress = prediction["sig"]
      
      plt.figure(1)
      plt.plot(temperature)
      plt.title("tempreture")

      plt.figure(2)
      plt.plot(stress)
      plt.title("heat")
      
      plt.show()
